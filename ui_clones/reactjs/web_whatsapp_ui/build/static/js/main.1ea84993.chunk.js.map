{"version":3,"sources":["components/details/Details.tsx","components/navigation/Navigation.tsx","components/search/Search.tsx","components/contact/Contact.tsx","components/list/List.tsx","components/message/Message.tsx","components/chat/Chat.tsx","components/messageInput/MessageInput.tsx","components/chatbox/Chatbox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Details","contact","className","alt","src","profile_image","name","last_seen","date","Date","suffix","hours","getHours","getMonth","getDate","getFullYear","getMinutes","getLastSeen","Navigation","navigationOpen","toggleNavigation","onClick","e","Search","updateSearchValue","searchValue","htmlFor","id","placeholder","value","onChange","target","onSearchChange","Contact","status","List","contacts","map","c","Message","message","timestamp","theirs","getClassName","minutes","console","log","getTimestamp","Chat","messages","m","from","MessageInput","Chatbox","useState","setNavigationOpen","selectedContact","setSelectedContact","setSearchValue","filter","toLocaleUpperCase","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ea84993.chunk.js","sourcesContent":["import \"./Details.css\";\r\n\r\nimport { Contact as ContactModel } from \"../../models/Contact\";\r\n\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\ninterface Props {\r\n  contact: ContactModel;\r\n}\r\n\r\nexport default function Details({ contact }: Props) {\r\n  function getLastSeen(last_seen: string) {\r\n    const date = new Date(last_seen);\r\n\r\n    let suffix = \"\";\r\n\r\n    let hours = date.getHours();\r\n\r\n    if (hours > 12) {\r\n      suffix = \"PM\";\r\n      hours -= 12;\r\n    } else {\r\n      suffix = \"AM\";\r\n    }\r\n\r\n    return `last seen ${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()} at ${hours}:${date.getMinutes()} ${suffix}`;\r\n  }\r\n  return (\r\n    <div className=\"details-section\">\r\n      <div className=\"user\">\r\n        <img\r\n          alt=\"profile\"\r\n          className=\"profile-picture\"\r\n          src={contact.profile_image}\r\n        />\r\n        <div className=\"details\">\r\n          <span className=\"name\">{contact.name}</span>\r\n          <span className=\"last-seen\">{getLastSeen(contact.last_seen)}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"actions\">\r\n        <AttachFileIcon className=\"icon-clickable\" />\r\n        <MoreVertIcon className=\"icon-clickable\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Navigation.css\";\r\n\r\nimport MessageIcon from \"@material-ui/icons/Message\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\ninterface Props {\r\n  navigationOpen: boolean;\r\n  toggleNavigation: Function;\r\n}\r\n\r\nexport default function Navigation({navigationOpen, toggleNavigation}: Props) {\r\n  if(navigationOpen) {\r\n    return (\r\n      <div className=\"navigation-section\">\r\n        <ArrowBackIcon onClick={(e) => toggleNavigation()} className=\"back icon-clickable\"/>\r\n        <span className=\"new-chat\">New chat</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"navigation-section\">\r\n        <img\r\n          alt=\"profile\"\r\n          className=\"profile-picture\"\r\n          src=\"assets/images/Frontend_Coding.png\"\r\n        />\r\n        <div className=\"actions\">\r\n          <MessageIcon className=\"icon-clickable\" onClick={(e) => toggleNavigation()} />\r\n          <MoreVertIcon className=\"icon-clickable\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./Search.css\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\ninterface Props {\r\n  updateSearchValue: Function;\r\n  searchValue: string;\r\n}\r\n\r\nexport default function Search({updateSearchValue, searchValue}: Props) {\r\n  function onSearchChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    updateSearchValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-section\">\r\n      <label htmlFor=\"searchbar\">\r\n        <SearchIcon />\r\n      </label>\r\n      <input id=\"searchbar\" placeholder=\"Search contacts\" value={searchValue} onChange={(e) => {onSearchChange(e)}} />\r\n    </div>\r\n  );\r\n}\r\n","import \"./Contact.css\";\r\n\r\nimport { Contact as ContactModel } from \"../../models/Contact\";\r\n\r\ninterface Props {\r\n  contact: ContactModel;\r\n  onClick: Function;\r\n}\r\n\r\nexport default function Contact({ contact, onClick }: Props) {\r\n  return (\r\n    <div onClick={(e) => onClick(contact)} className=\"contact\">\r\n      <img alt=\"profile\" className=\"profile-picture\" src={contact.profile_image} />\r\n      <div className=\"details\">\r\n        <span className=\"name\">{contact.name}</span>\r\n        <span className=\"status\">{contact.status}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./List.css\";\r\n\r\nimport Contact from \"../contact/Contact\";\r\nimport { Contact as ContactModel } from \"../../models/Contact\";\r\n\r\ninterface Props {\r\n  contacts: ContactModel[];\r\n  onClick: Function;\r\n}\r\n\r\nexport default function List({ contacts, onClick }: Props) {\r\n  return (\r\n    <div className=\"list-section\">\r\n      {contacts.map((c) => {\r\n        return <Contact onClick={onClick} key={c.name} contact={c} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import \"./Message.css\";\r\n\r\ninterface Props {\r\n  message: string;\r\n  timestamp: string;\r\n  theirs?: boolean;\r\n}\r\n\r\nexport default function Message({ message, timestamp, theirs }: Props) {\r\n  function getClassName(theirs: boolean | undefined) {\r\n    return theirs ? \"message-theirs\" : \"message-us\";\r\n  }\r\n\r\n  function getTimestamp(timestamp: string) {\r\n    const date = new Date(timestamp);\r\n\r\n    let suffix = \"\";\r\n\r\n    let hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n\r\n    if (hours > 12) {\r\n      suffix = \"PM\";\r\n      hours -= 12;\r\n    } else {\r\n      suffix = \"AM\";\r\n    }\r\n\r\n    console.log(hours, minutes);\r\n\r\n    return `${hours}:${minutes} ${suffix}`;\r\n  }\r\n\r\n  return (\r\n    <div className={`message-container ${getClassName(theirs)}`}>\r\n      <div className=\"message\">\r\n        <span className=\"content\">{message}</span>\r\n        <span className=\"timestamp\">{getTimestamp(timestamp)}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Chat.css\";\r\n\r\nimport Message from \"../message/Message\";\r\nimport { Message as MessageModel } from \"../../models/Message\";\r\n\r\ninterface Props {\r\n  messages: MessageModel[];\r\n}\r\n\r\nexport default function Chat({ messages }: Props) {\r\n  return (\r\n    <div className=\"chat-section\">\r\n      {messages.map(m => {\r\n        return <Message message={m.message} timestamp={m.timestamp} theirs={m.from === \"them\"}/>\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import \"./MessageInput.css\";\r\n\r\nimport MoodIcon from \"@material-ui/icons/Mood\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\n\r\nexport default function MessageInput() {\r\n    return (\r\n        <div className=\"message-section\">\r\n        <MoodIcon className=\"icon-clickable\"/>\r\n        <input className=\"message-input\" placeholder=\"Type a message\"/>\r\n        <MicIcon className=\"icon-clickable\"/>\r\n      </div>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport \"./Chatbox.css\";\r\nimport contacts from \"../../data/contacts.json\";\r\n\r\nimport Details from \"../details/Details\";\r\nimport Navigation from \"../navigation/Navigation\";\r\nimport Search from \"../search/Search\";\r\nimport List from \"../list/List\";\r\nimport Chat from \"../chat/Chat\";\r\nimport MessageInput from \"../messageInput/MessageInput\";\r\nimport { Contact as ContactModel } from \"../../models/Contact\";\r\n\r\nexport default function Chatbox() {\r\n  const [navigationOpen, setNavigationOpen] = useState(false);\r\n  const [selectedContact, setSelectedContact] = useState(contacts[0]);\r\n  const [searchValue, setSearchValue] = useState(\"\")\r\n\r\n  function toggleNavigation() {\r\n    setNavigationOpen(!navigationOpen);\r\n  }\r\n\r\n  function onClickOnContact(contact: ContactModel) {\r\n    setSelectedContact(contact);\r\n  }\r\n  \r\n  function updateSearchValue(value: string) {\r\n    setSearchValue(value);\r\n  }\r\n\r\n  function getFilteredContacts(contacts: ContactModel[]) {\r\n    const filteredContacts = contacts.filter(c => {\r\n      if(c.name.toLocaleUpperCase().includes(searchValue.toLocaleUpperCase())) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    })\r\n    return filteredContacts;\r\n  }\r\n\r\n  return (\r\n    <div className={`chatbox ${(navigationOpen) ? 'chatbox-navigation-open' : 'chatbox-navigation-closed'}`}>\r\n      <Navigation navigationOpen={navigationOpen} toggleNavigation={toggleNavigation}/>\r\n      <Search updateSearchValue={updateSearchValue} searchValue={searchValue}/>\r\n      <List onClick={onClickOnContact} contacts={getFilteredContacts(contacts)}/>\r\n      <Details contact={selectedContact}/>\r\n      <Chat messages={selectedContact.messages}/>\r\n      <MessageInput/>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport Chatbox from \"./components/chatbox/Chatbox\"\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Chatbox/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}