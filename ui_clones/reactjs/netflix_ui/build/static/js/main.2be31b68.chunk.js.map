{"version":3,"sources":["components/button/Button.tsx","pages/profiles/Profiles.tsx","components/movieListMovie/MovieListMovie.tsx","components/movieList/MovieList.tsx","pages/browse/Browse.tsx","components/navbar/Navbar.tsx","pages/landing/Landing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","label","secondary","primary","tertiary","ghost","className","Profiles","onProfileClick","profiles","map","profile","index","key","onClick","e","src","image_src","username","MovieListMovie","movie","style","backgroundImage","MovieList","id","href","movies","slice","length","Browse","Navbar","only_logo","profile_url","Landing","useState","undefined","user","setUser","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2be31b68.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Button.css\";\r\n\r\ninterface Props {\r\n  primary?: boolean;\r\n  secondary?: boolean;\r\n  tertiary?: boolean;\r\n  ghost?: boolean;\r\n  label: string;\r\n}\r\n\r\nexport default function Button({ label, primary, secondary, tertiary, ghost }: Props) {\r\n  if (tertiary) {\r\n    return <button>tertiary</button>;\r\n  } else if (secondary) {\r\n    if (ghost) {\r\n      return <button className=\"button-container secondary-button secondary-ghost-button\">{label}</button>;\r\n    } else {\r\n      return <button className=\"button-container secondary-button\">{label}</button>;\r\n    }\r\n  } else {\r\n    if (ghost) {\r\n      return <button className=\"button-container primary-button primary-ghost-button\">{label}</button>;\r\n    } else {\r\n      return <button className=\"button-container primary-button\">{label}</button>;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Profiles.css\";\r\n\r\nimport profiles from \"../../data/profiles/profiles.json\";\r\n\r\nimport Button from \"../../components/button/Button\";\r\n\r\ninterface Props {\r\n  onProfileClick: Function;\r\n}\r\n\r\nexport default function Profiles({ onProfileClick }: Props) {\r\n  return (\r\n    <div className=\"profiles-container\">\r\n      <span className=\"title\">Who's watching?</span>\r\n      <div className=\"profiles\">\r\n        {profiles.map((profile, index) => (\r\n          <div key={index} onClick={(e) => onProfileClick(profile)} className=\"profile\">\r\n            <img className=\"image\" src={profile.image_src} />\r\n            <span className=\"username\">{profile.username}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Button ghost secondary label=\"MANAGE PROFILES\" />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./MovieListMovie.css\";\r\nimport { Movie } from \"../../models/movie/Movie\";\r\n\r\ninterface Props {\r\n  movie: Movie;\r\n}\r\n\r\nexport default function MovieListMovie({ movie }: Props) {\r\n  return (\r\n    <div\r\n      className=\"movie\"\r\n      style={{ backgroundImage: `url(${movie.image_src})` }}\r\n    >\r\n      <h3 className=\"title\">Movie title</h3>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./MovieList.css\";\r\n\r\nimport movies from \"../../data/movies/movies.json\";\r\n\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport MovieListMovie from \"../movieListMovie/MovieListMovie\";\r\n\r\nexport default function MovieList() {\r\n  return (\r\n    <div className=\"movie-list-container\">\r\n      <h2 className=\"title\">Trending Now</h2>\r\n      <div className=\"movies\">\r\n        <section id=\"section-1\">\r\n          <a className=\"previous\" href=\"#section-2\">\r\n            <ChevronLeftIcon />\r\n          </a>\r\n          {movies.slice(0, 5).map((movie, index) => (\r\n            <MovieListMovie movie={movie} />\r\n          ))}\r\n          <a className=\"next\" href=\"#section-2\">\r\n            <ChevronRightIcon />\r\n          </a>\r\n        </section>\r\n        <section id=\"section-2\">\r\n          <a className=\"previous\" href=\"#section-1\">\r\n            <ChevronLeftIcon />\r\n          </a>\r\n          {movies.slice(5, movies.length).map((movie, index) => (\r\n            <MovieListMovie movie={movie} />\r\n          ))}\r\n          <a className=\"next\" href=\"#section-1\">\r\n            <ChevronRightIcon />\r\n          </a>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Browse.css\";\r\nimport Button from \"../../components/button/Button\";\r\nimport MovieList from \"../../components/movieList/MovieList\";\r\n\r\nexport default function Browse() {\r\n  return (\r\n    <div className=\"browse-container\">\r\n      <div className=\"thumbnail-section\">\r\n        <div className=\"thumbnail\" style={{ backgroundImage: `linear-gradient(to right, rgba(0, 0, 0, 0.7) 15%, transparent 60%), url(assets/images/popcorn.jpg)` }}></div>\r\n        <div className=\"description-section\">\r\n          <span className=\"description\">This is the description of our popcorn movie! We hope you will enjoy the movie!</span>\r\n          <div className=\"actions\">\r\n            <Button primary label=\"Play\" />\r\n            <Button secondary label=\"More Info\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <MovieList/>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Navbar.css\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\n\r\ninterface Props {\r\n  only_logo: boolean;\r\n  profile_url?: string;\r\n}\r\n\r\nexport default function Navbar({ only_logo, profile_url }: Props) {\r\n  if (only_logo) {\r\n    return (<div className=\"navbar-container\">\r\n      <img className=\"logo\" src=\"assets/images/netflix.svg\" />\r\n    </div>);\r\n  } else {\r\n    return (\r\n      <div className=\"navbar-container\">\r\n        <img className=\"logo\" src=\"assets/images/netflix.svg\" />\r\n        <button className=\"button-tertiary button-tertiary-active\">Home</button>\r\n        <button className=\"button-tertiary\">Series</button>\r\n        <button className=\"button-tertiary\">Films</button>\r\n        <button className=\"button-tertiary\">Latest</button>\r\n        <button className=\"button-tertiary\">My List</button>\r\n\r\n        <div className=\"spacer\"></div>\r\n\r\n        <SearchIcon />\r\n        <CardGiftcardIcon />\r\n        <NotificationsIcon />\r\n        {profile_url && <img className=\"profile-image\" src={profile_url} />}\r\n        <ArrowDropDownIcon />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./Landing.css\";\r\n\r\nimport { Profile as ProfileModel } from \"../../models/profile/Profile\";\r\nimport Profiles from \"../profiles/Profiles\";\r\nimport Browse from \"../browse/Browse\";\r\nimport Navbar from \"../../components/navbar/Navbar\";\r\n\r\nexport default function Landing() {\r\n  const [user, setUser] = useState<ProfileModel | undefined>(undefined);\r\n\r\n  function onProfileClick(profile: ProfileModel) {\r\n    setUser((user) => profile);\r\n  }\r\n\r\n  return (\r\n    <div className=\"landing-container\">\r\n      <Navbar only_logo={user === undefined} profile_url={user?.image_src} />\r\n      {user === undefined ? <Profiles onProfileClick={onProfileClick} /> : <Browse />}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Landing from \"./pages/landing/Landing\";\r\n\r\nfunction App() {\r\n  return <Landing />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}